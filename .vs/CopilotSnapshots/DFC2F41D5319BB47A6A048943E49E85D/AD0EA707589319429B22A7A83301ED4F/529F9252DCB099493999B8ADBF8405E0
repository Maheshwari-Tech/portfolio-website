const express = require('express');
const nodemailer = require('nodemailer');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Nodemailer transporter
const transporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// API endpoint for feedback
app.post('/api/feedback', async (req, res) => {
  const { name, email, message } = req.body;

  const mailOptions = {
    from: email,
    to: 'shalinithebaria.work@gmail.com',
    subject: `Portfolio Feedback from ${name}`,
    text: `Name: ${name}\nEmail: ${email}\n\nMessage:\n${message}`
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: 'Feedback sent successfully!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to send feedback.' });
  }
});

// API endpoint for newsletter subscription
app.post('/api/subscribe', async (req, res) => {
  const { email } = req.body;

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: 'shalinithebaria.work@gmail.com',
    subject: 'New Newsletter Subscription',
    text: `New subscriber: ${email}`
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: 'Subscribed successfully!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Subscription failed.' });
  }
});

// API endpoint for appointment booking
app.post('/api/appointment', async (req, res) => {
  const { name, email, date, time, message } = req.body;

  const mailOptions = {
    from: email,
    to: 'shalinithebaria.work@gmail.com',
    subject: `Appointment Request from ${name}`,
    text: `Name: ${name}\nEmail: ${email}\nDate: ${date}\nTime: ${time}\nMessage: ${message}`
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: 'Appointment booked successfully!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to book appointment.' });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
